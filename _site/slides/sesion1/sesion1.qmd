---
title: "<FONT color='#A7D5E8'>Sesión 1: Introducción a R y Rstudio</FONT>"
subtitle: "<FONT color='#E9AFA3' size='10'>Curso: Introducción al software R para Ciencia de Datos en Salud <br> XXXVI CCN Huancayo - SOCIMEP 2022</FONT>"
author: "<FONT color='#FFFFFF' size='30'>Percy Soto-Becerra M.D., M.Sc(c)</FONT>"
institute: "<FONT color='#FFFFFF' size='5'>Investigador Externo, Universidad Continental, Huancayo<br>@github/psotob91</FONT>"
date: "<FONT color='#FFFFFF' size='6'>Agosto 11, 2022</FONT>"

format: 
  revealjs:
    self-contained: true
    theme: [simple, theme/theme.scss]
    footer: "Introducción a R y RStudio"
    slide-number: c/t
    logo: img/logo.png
    width: 1920
    height: 1080
    highlight-style: ayu-dark
    self-contained-math: true
from: markdown+emoji
execute:
  echo: true
---

```{r}
#| label: setup
#| include: false
library(fontawesome)
library(tidyverse)
library(quarto)
library(gt)
library(gtExtras)
library(gtsummary)
library(showtext)
library(kableExtra)

## Ver QUARTO RSTUDIO CONFERENCE: https://github.com/rstudio-conf-2022/get-started-quarto/blob/main/materials/02-authoring.qmd
## 
## blackboard theme: https://github.com/schochastics/quarto-blackboard-theme
## 
## https://github.com/schochastics/xaringan-themes
```

--- 

# Ciencia de Datos en Salud

---

## Datos y mundo actual

<br/>

::: r-stack
![](img/fda-realworld.png){.fragment}

![](img/nature-bigdata.png){.fragment}

![](img/jama-machine.png){.fragment}

![](img/cleveland-ibm.png){.fragment}
:::

::: {.notes}
Vivimos en un mundo repleto de datos, en salud solamente, los avances en computación y estadística nos permiten utilizar datos del mundo real para diversos fines. Desde big data, evidencia del mundo real hasta aplciaciones de inteligencia artificial, las posibilidades son infinitas. 
:::

---

## La crisis de replicabilidad de la Ciencia (incluyendo Ciencias Médicas)

<br/> 

![](img/replication.png)

::: {.notes}
Sin embargo, el auge de estos métodos no ha sido tan exitoso como se prometió. Muchos problemas han surgido de su aplicación inapropiada. Uno de los más sonados es la crisis de reproducibilidad de la  ciencia.
:::

--- 

## Ciencia de Datos 

<br/> 

<h3>En general</h3>

- La Ciencia de Datos es una disciplina que se dedica al estudio y aplicación de técnicas diversas (estadística, informática, etc.) para convertir datos crudos en información y conocimiento.

- En este curso aprenderemos a hacer esto de manera ordenada.

- Este es un curso introductorio con énfasis en pensamiento estadístico. 

. . .

<h3>En salud</h3>

>Ciencia de Datos en Salud (Health Data Science en inglés) es la ciencia y el arte de generar soluciones  basadas en datos a través de la comprensión de problemas de salud complejos del mundo real, empleando el pensamiento crítico y el análisis para derivar conocimiento de los (grandes) datos.^[<https://cbdrh.med.unsw.edu.au/what-health-data-science>]

::: {.notes}
La ciencia de datos bien aplicada puede contribuir a la solución de este problema. Esta se define como: **leer diapos**
:::

--- 

# Análisis de datos reproducible

---

## Checklist de reproducibilidad

<br/> 

>¿Qué significa que un análisis de datos es "reproducible"?

A corto plazo:

  - ¿Las tablas y figuras se pueden reproducir del código y datos?
  
  - ¿El código realmenet hace lo que quieres que haga?
  
  - ¿Es claro por qué el código hace lo que hace?

A largo plazo:

  - ¿Puede el código ser usado con otros datos?
  
  - ¿Puedes extender el código a otros usos?

::: {.notes}
leer diapos
:::

---

## Flujograma de ciencia de datos

::: r-stack

![](img/data-science-cycle.001.png){.fragment}

![](img/data-science-cycle.002.png){.fragment}

![](img/data-science-cycle.003.png){.fragment}

![](img/data-science-cycle.004.png){.fragment}

![](img/data-science-cycle.005.png){.fragment}

![](img/data-science-cycle.006.png){.fragment}

![](img/data-science-cycle.007.png){.fragment}

![](img/data-science-cycle.008.png){.fragment}

![](img/data-science-cycle.009.png){.fragment}

::: 

::: {.notes}
Les presente el flujo de trabajo de la ciencia reproducible. Es un flujo ordenado e iterativo. R, RStudio y sus herramientas nos permiten realizar todo esto un solo programa.
:::

---

## Kit de herramientas para reproducibilidad

<br/> 

- Flujo de trabajo reproducible

    + Scriptabilidad `r fontawesome::fa("arrow-right")` R
    
    + Programación literaria (código, narrativa, salida en un solo lugar) `r fontawesome::fa("arrow-right")` RMarkdown y Quarto
    
    + Versión de control `r fontawesome::fa("arrow-right")` Git / Github
    
- En este curso nos enfocaremos en Scriptabilidad y Programación literaria.

::: {.notes}
R permite... (leer diapos)
:::

---

# ¿Qué son R y RStudio?

---

## R y RStudio

<br/>

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 30%
knitr::include_graphics("img/R.png")
```

- [R](https://www.r-project.org/) es un `lenguaje de programación` estadística de código abierto.

- R también es un entorno para computación estadística y gráfica.

- Está potenciado con `paquetes`.

:::

::: {.column width="50%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 70%
knitr::include_graphics("img/RStudio.png")
```


- [RStudio](https://www.rstudio.com/) es una interfaz para R denominada `IDE` (*integrated development environment*).

- RStudio no es un requerido para programar con R, pero es uno de los IDE más comúnmente utilizados.

- Actualmente convirtiéndose en [posit](https://posit.co/).

:::
::::

::: {.notes}
Comencemos por explicar qué es R y RStudio. (leer diapos)
:::

---

## El problema de R: su aspecto

<br/>

![](img/Rconsola.png){fig-align="center"}

::: {.notes}
El gran problema de R es su aspecto, como pueden ver en la imagen que muestra la consola de R.
:::

---

## RStudio: el chasis del carro

<br/>

![](img/RStudioConsola.png){fig-align="center"}

::: {.notes}
En cambio, R Studio no solo tiene un mejor aspecto, si no que cuenta con múltiples herramientas que hacen mucho más sencillo y cómodo manejar R.
:::

---

## En resumen, R y RStudio

<br/>

![](img/ryrstudio.png){fig-align="center"}

::: {.notes}
En resumen, el motor de todo es R, es aquí donde ocurren las cosas, se realizan los cálculos, etc. Sin embargo, para poder operar el motor y sacarle el proyecto, necesitamos un buen tablero de mandos: ese es RStudio.
:::

---

## En resumen, R y RStudio

<br/>

![](img/rvsrstudio.png){fig-align="center"}

---

## Jerga básica de R

<br/>

>`Objeto:` Cualquier abstracción en R. Los datos son objetos en R.

<br/>

>`Función:` Código capaz de realizar una acción específica con los datos. También es un objeto: un objeto que actúa sobre otros objetos.

<br/>

>`Paquetes:` *Library* en inglés. Conjunto de funciones que realizan acciones a menudo relacionadas en R.

<br/>

>`Paquetes de R base:` Conjunto de paquetes instalados por defecto en R.
  
<br/>
  
>`Paquetes de R tidy:` Conjunto de paquetes que siguen el estilo tidy en R.

::: {.notes}
Es importante también conocer algunos términos comunes cuando se trabaja en R (leer definiciones)
:::

---

## Paquetes de R

<br/> 

::: columns
::: {.column width="60%"}
- Los `paquetes` son las unidades fundamentales del código reproducible en R.

- Al 13 de junio de 2022, hay 18 560 paquetes disponibles.

- ¡Trabajaremos con un pequeño (pero importante) conjunto de estos!

- Cada paquete contiene una o más funciones que ejecutan tareas.

- ¡Hay paquetes de todo tipo y para todos los gustos!
:::

:::{.column width="40%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 100%
knitr::include_graphics("img/r-packages.png")
```
:::
:::

::: {.notes}
Los paquetes son claves para todo. Leer diapos.
:::

---

## R y sus paquetes

<br/>

```{r}
#| echo: false
#| fig-align: center
#| out.width: 200%
knitr::include_graphics("img/r-rpackages.png")
```

::: aside
<br> <FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

::: {.notes}
Una forma de entender los paquetes es verlos como si fueran los applicativos de un celular. cada aplicativop uede realizar diversas tareas (funciones), y un celular promedio puede  tener más de un aplicativo.
:::

---

## En resumen: R, RStudio y sus paquetes

<br/>

```{r}
#| echo: false
#| fig-align: center
#| out.width: 90%
knitr::include_graphics("img/r-rstudio-paq.png")
```

::: aside
<br> <FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

---

## tidyverse

<br/> 

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out.width: 99%
knitr::include_graphics("img/tidyverse.png")
```

:::

:::{.column width="50%"}

<center><h2>[tidyverse.org](https://www.tidyverse.org/)</h2></center>

<br/> 

- `Tidyverse` es una colección grande de paquetes de R diseñados para hacer ciencia de datos.

- Todos los paquetes comparten una filosofía subyacente y una gramática común.

- R, como todo lenguaje, tiene varios dialectos. 

- Dos dialectos predominan: `R base` y `R tidy`.

- `R tidy` se basa en la filosofía de tidyverse. 

- Usaremos este enfoque predominantemente y `R base` cuando no tenga remplazo o sea más sencillo usarlo.

:::
:::


::: {.notes}
Dentro de los paquetes famosos de R, tidyverse es uno de los más emblemáticos.
:::

---

# Conociendo mejor R y Rstudio

---

## Ventanas de RStudio

<br/>

![](img/rstudio-partes.png){fig-align="center"}

---

## Código en scripts de R

<br/> 

::: columns
::: {.column width="70%"}
```{r}
#| echo: false
#| fig-align: center
#| out.width: 90%
knitr::include_graphics("img/r-script.png")
```


:::

::: {.column width="30%"}

- El código se escribe en el Script, pero no se imprime.

- Los resultado se imprimen en la consola.

- Aunque es útil usar la consola, es preferible usar herramientas de programación literaria: RMarkdown o Quarto.

:::
:::

---

## R Markdown y Quarto

<br/> 

:::: columns
::: {.column width="50%"}

<center><h2>[rmarkdown.rstudio.com](https://rmarkdown.rstudio.com/)</h2></center>

<br/> 

- `rmarkdown` y `quarto` permiten a los usuarios de R escribir su código y prosa en documentos computacionales reproducibles. 

- Por lo general, nos referimos a documentos R Markdown con la extensión `.Rmd` y a los documentos Quarto con la extensión `.qmd`.

:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("img/rmarkdown.png")
```

:::

::::

---

## Archivo R Markdown (.Rmd) a PDF

![](img/rmarkdown-pdf.png)

---

## R Markdown evolucionó a Quarto

<br/>

::: columns
::: {.column width="70%"}
::: r-stack
![](img/quarto.png)

![](img/quarto2.png){.fragment}
:::
:::

::: {.column width="30%"}
-   Recientemente, RStudio presentó Quarto: <https://quarto.org/>.
-   Es la versión mejorada de RMarkdwon.
-   Si usaste RMarkdown, puedes ejecutar tus códigos en Quarto sin ningún problema.
-   Quarto permite ejecutar código Python, Julia y Observable.
:::
:::

---

## R Markdown y Quarto son muy flexibles

<br/> 

-   Herramientas de `programación literaria`: 

    +   Legibles para la computadora y para el ser humano.
    
-   Útiles para alcanzar reproducibilidad.

-   También muy útiles para diversas actividades académicas: 

    +   Presentaciones académicas
    
    +   Artículos científicos
    
    +   Diseño de blogs, web u otra herramienta de difusión de conocimiento. 

---

## Programación Literaria

<br/>

![](img/prog-literaria.png){fig-align="center"}

::: aside
<FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

---

## ¿Cómo usaremos Quarto?

<br/>

- Cada ejercicio / reporte / proyecto / tarea / etc. será hecho en un documento R Markdown aumentado: Quarto. 

- Siempre te proporcionaremos una plantilla de documento Quarto para iniciar.

- Las plantillas irán modificándose conforme avancemos el curso. 

- Las plantillas son simplemente eso, plantillas, para usarlas en su día a día no necesita pensar mucho en ellas ni entenderlas a detalle.

- Yo entiendo menos del 20% de estas y aún así me sirven mucho para mi trabajo diario. ¡Sugiero comenzar haciendo lo mismo!

---

## Partes de un documento Quarto / R Markdown

![](img/tour-rmarkdown.png)

::: aside
<br> <FONT size='4'>*Meet the toolkit: programming. datasciencebox.org.* \[[Enlace](https://datasciencebox.org/course-materials/_slides/u1-d02-toolkit-r/u1-d02-toolkit-r.html#1)\]</FONT>
:::

---

---

## Antes de usar R, configure su ambiente de trabajo

<br/>

- **Paso 1:** Cree una carpeta de trabajo `r fontawesome::fa("folder")`. 

    + En donde quiera. Sea ordenado.  

- **Paso 2:** Abra RStudio `r fontawesome::fa("r-project")`. 

- **Paso 3:** Cree un proyecto y vincule el proyecto con la carpeta nueva. 

    + A partir de este momento, la carpeta que contiene el archivo `.Rproj` es denominada `carpeta raíz`. 
    
    + Todo lo que ocurra en R partirá de la carpeta raíz en adelante.

- **Paso 3:** Comience a trabajar. Puede usar `R scripts` o `R Markdown / Quarto`.

    + Nosotros usaremos `Quarto`.

---

# `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<br/>

-   Cree una carpeta de trabajo en Documentos, llámela `mi_primer_proyecto`.
-   Cree un proyecto de Rstudio y ubíquelo en la carpeta nueva `mi_primer_proyecto`.
-   Cree el primer script de R, anote lo siguiente: `"# Este es mi primer script de R"` y guárdelo como `mi_primer_script.r`.
-   Cree el primer archivo .qmd de Quarto, anote lo siguiente: `"# Este es mi primer archivo quarto"` y guárdelo como `mi_primer_quarto.qmd`.
-   Verifique que los archivos han sido creados y se encuentran en la carpeta raíz `mi_primer_proyecto`.

<br/><br/><br/>  

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}

```

```{R}
#| echo: false
countdown_timer(2)
```


---

# Primeros pasos usando R

---

## R es una calculadora

<br/> 

- En su nivel más básico, R es una calculadora:

::: panel-tabset
### Básicas 1

::: columns
::: {.column width="50%"}
-   Suma:

```{r}
#| echo: true
3 + 8
```

-   Resta:

```{r}
#| echo: true
3 - 8
```
:::

::: {.column width="50%"}
-   Multiplicación

```{r}
#| echo: true
3 * 8
```

-   División

```{r}
#| echo: true
3 * 8
```
:::
:::

### Básicas 2

::: columns
::: {.column width="50%"}
-   Potencia:

```{r}
#| echo: true
3 ^ 3 # ^ se obtiene mediante: ALT + 94
```

-   Raíz cuadrada:

```{r}
#| echo: true
sqrt(16)
```
:::

::: {.column width="50%"}
-   Otra raíz

```{r}
#| echo: true
8 ^ (1 / 3) # Raíz cúbica
```

-   Operación combinada

```{r}
#| echo: true
15 + (64 - 60) ^ (1/2)
```
:::
:::

### Avanzadas 1

::: columns
::: {.column width="50%"}
-   Logaritmo natural:

```{r}
#| echo: true
log(12) # log es logaritmo natural o neperiano
```

-   Logaritmo base 10:

```{r}
#| echo: true
log10(100)
```
:::

::: {.column width="50%"}
-   Exponencial

```{r}
#| echo: true
exp(2)
```

-   pi

```{r}
#| echo: true
pi
```
:::
:::

### Comparaciones

::: columns
::: {.column width="50%"}
-   Mayor que:

```{r}
#| echo: true
5 > 4
```

-   Menor igual que:

```{r}
#| echo: true
6 <= 3
```
:::

::: {.column width="50%"}
-   Igualdad:

```{r}
#| echo: true
7 == 7
```

-   Diferente:

```{r}
#| echo: true
8 != 5
```
:::
:::
:::

---

## R es más que una simple calculadora

<br/>

- Pero..., R es más que solo una calculadora...

- R es un lenguaje compuesto por "palabras".

- Las palabras son objetos en R:

    + Todo (casi) es un objeto.

- Los verbos de R son las funciones:

    + Ejecutan acciones sobre otros objetos.
    
    + Los objetos sobre los que recae la acción se incluyen entre paréntesis.
  
. . .

- Estructura general de una función:

```{.r}
ejecuta_accion(sobre_esto)
ejecuta_accion(sobre_esto, hacia_eso, con_esto)
```

. . .

- Dos funciones usuales son `install.packages` y `library`, las cuales instalan y cargan un paquete, respectivamente:

```{.r}
install.packages("package_name")
library(package_name)
```

---

## Ayuda en R

<br/>

- La documentación acerca de una función puede ser consultada mediante `?`

```{.r}
?library
```

::: r-stack

![](img/help1.png){.fragment}

![](img/help2.png){.fragment}
:::

---

## Cargar conjunto de datos de R

- Se pueden importar de diversas fuentes: MS Excel, .csv, .txt, Stata, SAS, SPSS, etc.

- Algunos paquetes cuentan también con datos en formato de R: `*.RData` o `.rds`.

- Importar datos de paquetes:

```{r}
#| echo: true
library(medicaldata)
data(covid_testing)
```

- Consultar por descrpción de la data

```{r}
?covid_testing
```

- Ver un resumen de los datos

```{r}
head(covid_testing)
```

---

## Operador esenciales de R base

::: panel-tabset

## Operador seleccionar `$`

- En un conjunto de datos, permite seleccionar la columna de interés.

- Por ejemplo, género de los participantes:

```{r}
covid_testing$gender
```

- O la edad:

```{r}
head(covid_testing$age)
```

## Operador asignar nombre `<-`

- `<-` representa una flecha que se lee: "asignar a"

- Permite guardar un objeto con un nombre dado

```{r}
genero <- covid_testing$gender
```

- El objeto se guarda en el `Environment`.

- Luego, lo puedes llamar utilizando el nombre con el que lo guardaste.

```{r}
genero
```

:::

--- 

# `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<br/>

-   En el script previamente creado `mi_primer_script.r`, escriba las siguientes operaciones matemáticas: cinco más ocho;  tres por 23; veinte elevado al cubo; setenta y tres entre cinco. Ejecute el código y mire el resultado en la consola.

- Copie las operaciones matemáticas escritas en `mi_primer_script.r` sobre `mi_primer_quarto.qmd`.

- El código debe colocarse como `chunk` de código par que pueda ejecutarse. Ejecute el código de cada chunk.
    
- Compare las salidas del `mi_primer_script.r` y de `mi_primer_quarto.qmd`.

- Instale y cargue el paquete `{tidyverse}` y el paquete `{medicaldata}`.

- Consulte la ayuda de la función `filter` del paquete `{dplyr}` de `{tidyverse}`.

- Descargue el conjunto de datos `theoph_` de la libería `{medicaldata}`.

- Seleccion la columna `Dose` y asignelo a un objeto nuevo llamado `dosis`.

```{r}
#| echo: false
countdown_timer(3)
```

---

# Datos en R

## Conjunto de datos en R

<br/>

- En investigación, las bases de datos se organizan en [tablas rectangulares]{.hl} estructuradas.

    + Cada fila es una [observación]{.hl}
    + Cada columna es una [variable]{.hl}

- Hay dos clases de objetos que comúnmente usamos para almacenar y manipular datos en R: 
    + [data.frame]{.hl}
    + [data.tibble]{.hl}

![<FONT size='4'>*Adaptado de Smit Aj, Abrahams A & Schlegel RW. Intro R Workshop: Data Manipulation, Analysius, and Visualization.*</FONT>](img/table-datos.png)


## data.tibble versus data.frame

<br/>
    
>[Los [data.tibble]{.hl} también son [data.frame]{.hl}, pero con algunos [poderes adicionales]{.hl}.]{.r-fit-text}

::: columns
::: {.column width='50%'}

<br/>

<center><h3>[Así se ve un data tibble]{.verd1}</h3></center>

```{r}
#| echo: false
library(medicaldata)
data(covid_testing)
covid_testing <- covid_testing %>% as_tibble() %>% select(1:5)
```

```{r}
covid_testing
```

- Notar que los [data.tibble]{.hl} son [data.frame aumentados]{.hl}:

```{r}
class(covid_testing)
```

:::

::: {.column width='50%'}

<br/>

<center><h3>[Y así un data frame]{.verd1}</h3></center>

```{r}
#| echo: false
covid_testing <- as.data.frame(covid_testing)
```

```{r}
covid_testing
```

- Los [data.frame]{.hl} son solo eso, [data.frame]{.hl}:

```{r}
class(covid_testing)
```

:::

:::

## ¿De qué están hechos los data.frame y data.tibble?

<br/> 

- Sus unidades básicas son los [vectores]{.hl}.
- Los vectores son colecciones de datos de un solo tipo:

<br/>

```{r}
#| echo: false
tipo_vector <- data.frame(
  tipo = c("Entero", "Doble", "Caracter", "Lógicos", "Factor"), 
  tipo_ingles = c("Integer", "Double", "Character", "Logical", "Factor"), 
  desc = c("Solo números enteros", "Números", "Texto o cadenas ('strings')", "Verdadero o Falso", "Categorías"), 
  ejem = c("c(1, 2, 3, 4)", "c(1, 2.4, 3.14, 4)", "c('1', 'azul', 'divertido', 'monstruo')", "c(TRUE, FALSE, TRUE, FALSE)", "c('Muy intenso', 'Leve', 'Moderado', 'Leve')")
)
```

```{r}
#| echo: false
#| results: asis
kbl(tipo_vector, 
    col.names = c("<FONT color='#9DA7A7'>Tipo de dato</FONT>", "<FONT color='#9DA7A7'>(En inglés)</FONT>", "<FONT color='#9DA7A7'>Descripción</FONT>", "<FONT color='#9DA7A7'>Ejemplo</FONT>"), 
    format = "markdown") %>% 
  kable_styling(font_size = 40, 
                # bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = T, 
                position = "center", 
                htmltable_class = "lightable-minimal")
```

## Vectores como átomos de R

<br/>

::: columns

::: {.column width='40%'}
- Vectores se limitan a [un solo tipo de dato]{.hl}.

- Conforman [diversas estructuras]{.hl}: matrices, arreglos, listas, etc.

- Usaremos principalmente data frames y data tibbles.

- Los data frames y tibbles son:
    
    + Columnas de vectores.
    
    + Cada vector puede ser de distinto tipo.
    
    + Almacenan más de un tipo de dato: *integer*, *double*, *character*, *logic*, *factor*, *etc*.
    
:::

::: {.column width='60%'}

<br/> 

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/estructuras-r.png")
```

:::
:::

## ¿Cómo podemos ver qué hay en los conjuntos de datos?

<br/> 
Podemos [hechar un vistazo]{.hl} ([glimpse]{.plo} en inglés) a los datos:

<br/>

```{r}
#| echo: false
library(medicaldata)
data(covid_testing)
```

```{r}
glimpse(covid_testing)
```

## ¿Cómo obtener más información?

::: panel-tabset
## Diccionario

Como los datos provienen de un paquete en R, se puede usar la función de ayuda [?]{.plo}

```{r}
#| echo: true
#| eval: false
?covid_testing
```

![](img/help_covid_testing.png){fig-align="center"}

## Dimensiones

<br/> 

- Número de filas: 

```{r}
nrow(covid_testing)
```

<br/> 

- Número de columnas: 

```{r}
ncol(covid_testing)
```

<br/> 

- Número de filas y columnas: 

```{r}
dim(covid_testing)
```

:::

# Importando datos a R

## Importar datos de fuentes externas a R


::: {style="margin-top: 100px; font-size: 2em; color: white;"}
| El paquete [{rio}]{.plo} es la [navaja suiza]{.hl}
|  de la importación de datos en R.

<br/>

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("img/rio-hex.png")
```

:::

::: {.column width="50%"}

|           Su función [import]{.plo} 
|           permite importar 
|           prácticamente  
|           cualquier formato.

:::
:::


:::

## Importando datos con {rio}

::: panel-tabset

## Instalar {rio} {auto-animate="true"}

- [{rio}]{.plo} debe instalarse de una manera especial

- Pasos: 

    #. Primero se instala como siempre, usando [install.packages]{.plo}
    #. Adicionalmente, se sugiere correr [install_formats]{.plo}. inmediatamente después de la primera instalación.
    #. Se carga el paquete usando [library]{.plo}.

```r
install.packages("rio")
rio::install_formats()
library(rio)
```
::: {.fragment}
- [Más detalles sobre el paquete y sus funciones pueden encontrarse en la página web del paquete: <https://thomasleeper.com/rio/index.html>]
:::

## import

- Se usa [import]{.plo} para importar nuevos datos y [<-]{.plo} para asignar los datos a un nuevo [data.frame]{.hl}

```r
nuevos_datos <- import(file = "datos_para_importar.fmt")
```

<br/>

>Podemos omitir los nombres de los argumentos cuando utilizamos funciones.

<br/>

::: columns
::: {.column width="50%"}

```r
nuevos_datos <- import(file = "datos_para_importar.fmt")
```

:::

::: {.column width="50%"}

```r
nuevos_datos <- import("datos_para_importar.fmt")
```

:::
:::

## Archivo plano

- Para archivos de tipo \*.csv o \*.txt

- No importa el tipo de separación de las columnas: comas, puntos y comas, otros caracteres.

    + [import]{.plo} determinará rápidamente el tipo de separación y hará el trabajo.
    
```{r}
#| echo: false
library(rio)
```

```{r}
datos_csv <- import("maca_meno_perclin.csv")
head(datos_csv)
```

## MS Excel 

- Útil para archivos con las extensiones \*.xls o \*.xlsx

```{r}
datos_xlsx <- import("maca_meno_perclin.xlsx")
head(datos_xlsx)
```

## Stata (*.dta)

- Permite importar datos de formato Stata.

- En Stata, los valores de las variables suelen estar etiquetados, por lo que es importante también recuperar esta información.

- Si importamos una tabla de datos en formato Stata, vemos que algunas variables categóricas como [married]{.verd1} o [married2]{.verd2} se importan como números. ¿Qué significa 1 o 0?

```{r}
datos_dta <- import("maca_meno_fase1.dta")
head(datos_dta)
```

## SPSS (*.sav)

- Permite importar datos de formato SPSS.

```{r}
datos_sav <- import("RECH0.sav")
head(datos_sav)
```

## Otros

- La función [import]{.plo} soporta una gran variedad de formatos.

- Si alguna vez necesita, puede consultar la web del paquete y encontrará tutoriales de cómo importar los formatos que requiera.

<center>[https://thomasleeper.com/rio/index.html]{.big-text2}</center>

:::

# `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<br/>

- Descargue la carpeta denominada [importar_datos]{.hl} disponible en este enlace: [click aquí]().
- Abra el proyecto denominado [importar_datos.Rproj]{.hl}
- Complete y ejecute el código faltante en los chunk de código.
- Una vez culmine todo el proceso, renderice el archivo .qmd.

<br/><br/><br/>  

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

```{R}
#| echo: false
countdown_timer(5)
```

--- 

<br/><br/><br/><br/><br/>
<center>[Preguntas?]{.big-text6}</center>

--- 

<br/><br/><br/><br/><br/>
<center>[Muchas gracias!]{.big-text6}</center>

